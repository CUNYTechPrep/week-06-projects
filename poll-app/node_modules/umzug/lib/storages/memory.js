'use strict';

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _none = require('./none');

var _none2 = _interopRequireDefault(_none);

var _helper = require('../helper');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @class MemoryStorage
 */
module.exports = function (_Storage) {
  (0, _inherits3.default)(MemoryStorage, _Storage);

  function MemoryStorage() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, MemoryStorage);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = MemoryStorage.__proto__ || (0, _getPrototypeOf2.default)(MemoryStorage)).call.apply(_ref, [this].concat(args))), _this), _this.log = [], _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }
  /**
   * Internal log of executed migrations.
   *
   * @private
   */


  (0, _createClass3.default)(MemoryStorage, [{
    key: 'logMigration',


    /**
     * Logs migration to be considered as executed.
     *
     * @param {String} migrationName - Name of the migration to be logged.
     * @returns {Promise}
     */
    value: function logMigration(migrationName) {
      var _this2 = this;

      return _promise2.default.resolve().then(function () {
        _this2.log = [].concat((0, _toConsumableArray3.default)(_this2.log), [migrationName]);
      });
    }

    /**
     * Unlogs migration to be considered as pending.
     *
     * @param {String} migrationName - Name of the migration to be unlogged.
     * @returns {Promise}
     */

  }, {
    key: 'unlogMigration',
    value: function unlogMigration(migrationName) {
      var _this3 = this;

      return _promise2.default.resolve().then(function () {
        _this3.log = _lodash2.default.without(_this3.log, migrationName);
      });
    }

    /**
     * Gets list of executed migrations.
     *
     * @returns {Promise.<String[]>}
     */

  }, {
    key: 'executed',
    value: function executed() {
      return _promise2.default.resolve([].concat((0, _toConsumableArray3.default)(this.log)));
    }
  }]);
  return MemoryStorage;
}(_none2.default);